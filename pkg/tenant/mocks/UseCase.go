// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

import tenant "WarpCloud/walm/pkg/models/tenant"

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// CreateTenant provides a mock function with given fields: tenantName, tenantParams
func (_m *UseCase) CreateTenant(tenantName string, tenantParams *tenant.TenantParams) error {
	ret := _m.Called(tenantName, tenantParams)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *tenant.TenantParams) error); ok {
		r0 = rf(tenantName, tenantParams)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTenant provides a mock function with given fields: tenantName
func (_m *UseCase) DeleteTenant(tenantName string) error {
	ret := _m.Called(tenantName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tenantName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTenant provides a mock function with given fields: tenantName
func (_m *UseCase) GetTenant(tenantName string) (*tenant.TenantInfo, error) {
	ret := _m.Called(tenantName)

	var r0 *tenant.TenantInfo
	if rf, ok := ret.Get(0).(func(string) *tenant.TenantInfo); ok {
		r0 = rf(tenantName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tenant.TenantInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tenantName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTenants provides a mock function with given fields:
func (_m *UseCase) ListTenants() (*tenant.TenantInfoList, error) {
	ret := _m.Called()

	var r0 *tenant.TenantInfoList
	if rf, ok := ret.Get(0).(func() *tenant.TenantInfoList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tenant.TenantInfoList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTenant provides a mock function with given fields: tenantName, tenantParams
func (_m *UseCase) UpdateTenant(tenantName string, tenantParams *tenant.TenantParams) error {
	ret := _m.Called(tenantName, tenantParams)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *tenant.TenantParams) error); ok {
		r0 = rf(tenantName, tenantParams)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
