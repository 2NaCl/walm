// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import pkgtask "WarpCloud/walm/pkg/task"
import task "WarpCloud/walm/pkg/models/task"

// Task is an autogenerated mock type for the Task type
type Task struct {
	mock.Mock
}

// GetTaskState provides a mock function with given fields: sig
func (_m *Task) GetTaskState(sig *task.TaskSig) (pkgtask.TaskState, error) {
	ret := _m.Called(sig)

	var r0 pkgtask.TaskState
	if rf, ok := ret.Get(0).(func(*task.TaskSig) pkgtask.TaskState); ok {
		r0 = rf(sig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pkgtask.TaskState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*task.TaskSig) error); ok {
		r1 = rf(sig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurgeTaskState provides a mock function with given fields: sig
func (_m *Task) PurgeTaskState(sig *task.TaskSig) error {
	ret := _m.Called(sig)

	var r0 error
	if rf, ok := ret.Get(0).(func(*task.TaskSig) error); ok {
		r0 = rf(sig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterTask provides a mock function with given fields: taskName, _a1
func (_m *Task) RegisterTask(taskName string, _a1 func(string) error) error {
	ret := _m.Called(taskName, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(string) error) error); ok {
		r0 = rf(taskName, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendTask provides a mock function with given fields: taskName, taskArgs, timeoutSec
func (_m *Task) SendTask(taskName string, taskArgs string, timeoutSec int64) (*task.TaskSig, error) {
	ret := _m.Called(taskName, taskArgs, timeoutSec)

	var r0 *task.TaskSig
	if rf, ok := ret.Get(0).(func(string, string, int64) *task.TaskSig); ok {
		r0 = rf(taskName, taskArgs, timeoutSec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.TaskSig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = rf(taskName, taskArgs, timeoutSec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TouchTask provides a mock function with given fields: sig, pollingIntervalSec
func (_m *Task) TouchTask(sig *task.TaskSig, pollingIntervalSec int64) error {
	ret := _m.Called(sig, pollingIntervalSec)

	var r0 error
	if rf, ok := ret.Get(0).(func(*task.TaskSig, int64) error); ok {
		r0 = rf(sig, pollingIntervalSec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
