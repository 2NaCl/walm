/*
 * walm
 *
 * warp application lifecycle manager
 *
 * API version: 1.0.0
 * Contact: bing.han@transwarp.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package v1

import (
	"net/http"
	"strings"

	"walm/models"
	"walm/router/ex"

	"github.com/gin-gonic/gin"
)

type WalmInterface interface {
	Detele(args, flags []string) error
	Rollback(args, flags []string) error
	DeplyApplications(args, flags []string) error
	UpdateApplications(args, flags []string) error
	GetApplicationsStatus(args, flags []string) (string, error)
	FindApplicationsStatus(args, flags []string) ([]Status, error)
	Handler(c *gin.Context)
}

type InstInterface interface {
	Detele(c *gin.Context)
	Rollback(c *gin.Context)
	DeplyApplications(c *gin.Context)
	UpdateApplications(c *gin.Context)
	GetApplicationsStatus(c *gin.Context)
	FindApplicationsStatus(c *gin.Context)
}

var walmInst WalmInterface

func SetWalmInst(inter WalmInterface) {
	walmInst = inter
}

func DeleteApplication(c *gin.Context) {

	var args []string
	var flags []string
	name := c.Param("appname")
	if len(name) == 0 {
		c.JSON(ex.ReturnBadRequest())
		return
	} else {
		args = append(args, name)
	}

	if err := walmInst.Detele(args, flags); err != nil {
		c.JSON(ex.ReturnInternalServerError(err))
		return
	}

	if err := models.DeleteAppInst(name); err != nil {
		c.JSON(ex.ReturnInternalServerError(err))
	}

	c.JSON(ex.ReturnOK())

}

func DeployApplication(c *gin.Context) {

	var args []string
	var flags []string
	chart := c.Param("chart")
	if len(chart) == 0 {
		c.JSON(ex.ReturnBadRequest())
		return
	}
	var postdata Application
	if err := c.Bind(&postdata); err != nil {
		c.JSON(ex.ReturnBadRequest())
		return
	} else {
		if len(postdata.Name) > 0 {
			/*
			 flags = append(flags,"--name")
			 flags = append(flags,postdata.Name)
			*/
			args = append(args, postdata.Name)
			args = append(args, chart)
		} else {
			c.JSON(ex.ReturnBadRequest())
			return
		}
		if len(postdata.Namespace) > 0 {
			flags = append(flags, "--namespace")
			flags = append(flags, postdata.Namespace)
		}
		if len(postdata.Repo) > 0 {
			flags = append(flags, "--repo")
			flags = append(flags, postdata.Repo)
		}
		if len(postdata.Version) > 0 {
			flags = append(flags, "--version")
			flags = append(flags, postdata.Version)
		}
		if len(postdata.Value) > 0 {
			flags = append(flags, "--set")
			stringLine := strings.Join(postdata.Value, " ")
			flags = append(flags, stringLine)
		}

	}

	if err := walmInst.DeplyApplications(args, flags); err != nil {
		c.JSON(ex.ReturnInternalServerError(err))
		return
	}
	c.JSON(ex.ReturnOK())
}

func FindApplicationsStatus(c *gin.Context) {

	var args []string
	var flags []string

	name := c.Param("appname")
	if len(name) == 0 {
		c.JSON(ex.ReturnBadRequest())
		return
	} else {
		args = append(args, name)
	}

	namespace := c.Param("namespace")
	if len(namespace) > 0 {
		flags = append(flags, "--namespace")
		flags = append(flags, namespace)
	}

	reverse := c.Query("reverse")
	if len(reverse) > 0 {
		flags = append(flags, "--reverse")
	}

	max := c.Query("max")
	if len(max) > 0 {
		flags = append(flags, "--max")
		flags = append(flags, max)
	}

	offset := c.Query("offset")
	if len(offset) > 0 {
		flags = append(flags, "--offset")
		flags = append(flags, offset)
	}

	all := c.Query("all")
	if len(all) > 0 {
		flags = append(flags, "--all")
	}

	deleted := c.Query("deleted")
	if len(deleted) > 0 {
		flags = append(flags, "--deleted")
	}

	deleting := c.Query("deleting")
	if len(deleting) > 0 {
		flags = append(flags, "--deleting")
	}

	deployed := c.Query("deployed")
	if len(deployed) > 0 {
		flags = append(flags, "--deployed")
	}

	failed := c.Query("failed")
	if len(failed) > 0 {
		flags = append(flags, "--failed")
	}

	pending := c.Query("pending")
	if len(pending) > 0 {
		flags = append(flags, "--pending")
	}

	if status, err := walmInst.FindApplicationsStatus(args, flags); err != nil {
		c.JSON(ex.ReturnInternalServerError(err))
		return
	} else {
		c.JSON(http.StatusOK, status)
	}

}

func GetApplicationbyName(c *gin.Context) {
	var args []string
	var flags []string

	name := c.Param("appname")
	if len(name) == 0 {
		c.JSON(ex.ReturnBadRequest())
		return
	}
	args = append(args, name)

	flags = append(flags, "--revision")
	flags = append(flags, "--output json")

	if status, err := walmInst.GetApplicationsStatus(args, flags); err != nil {
		c.JSON(ex.ReturnInternalServerError(err))
		return
	} else {
		c.JSON(http.StatusOK, status)
	}
}

func RollBackApplication(c *gin.Context) {
	var args []string
	var flags []string

	name := c.Param("appname")
	if len(name) == 0 {
		c.JSON(ex.ReturnBadRequest())
		return
	}
	args = append(args, name)

	version := c.Param("version")
	if len(version) > 0 {
		args = append(args, version)
	}

	recreate := c.Query("recreate")
	if len(recreate) > 0 {
		flags = append(flags, "--recreate-pods")
	}

	force := c.Query("force")
	if len(force) > 0 {
		flags = append(flags, "--force")

	}

	wait := c.Query("wait")
	if len(wait) > 0 {
		flags = append(flags, "--wait")

	}

	if err := walmInst.Rollback(args, flags); err != nil {
		c.JSON(ex.ReturnInternalServerError(err))
		return
	}

	c.JSON(ex.ReturnOK())
}

func UpdateApplication(c *gin.Context) {
	var args []string
	var flags []string
	chart := c.Param("chart")
	if len(chart) == 0 {
		c.JSON(ex.ReturnBadRequest())
		return
	} else {
		args = append(args, chart)
	}
	var postdata Application
	if err := c.Bind(&postdata); err != nil {
		c.JSON(ex.ReturnBadRequest())
		return
	} else {
		if len(postdata.Name) > 0 {
			flags = append(flags, "--name")
			flags = append(flags, postdata.Name)
		}
		if len(postdata.Namespace) > 0 {
			flags = append(flags, "--namespace")
			flags = append(flags, postdata.Namespace)
		}
		if len(postdata.Repo) > 0 {
			flags = append(flags, "--repo")
			flags = append(flags, postdata.Repo)
		}
		if len(postdata.Version) > 0 {
			flags = append(flags, "--version")
			flags = append(flags, postdata.Version)
		}
		if postdata.Install {
			flags = append(flags, "--install")
			//flags = append(flags,postdata.Install)
		}
		if postdata.ResetValue {
			flags = append(flags, "--reset-values")
			//flags = append(flags,postdata.ResetValue)
		}
		if postdata.ReuseValue {
			flags = append(flags, "--reuse-values")
			//flags = append(flags,postdata.ReuseValue)
		}

		if len(postdata.Value) > 0 {
			flags = append(flags, "--set")
			stringLine := strings.Join(postdata.Value, " ")
			flags = append(flags, stringLine)
		}

	}

	if err := walmInst.UpdateApplications(args, flags); err != nil {
		c.JSON(ex.ReturnInternalServerError(err))
		return
	}
	c.JSON(ex.ReturnOK())
}
